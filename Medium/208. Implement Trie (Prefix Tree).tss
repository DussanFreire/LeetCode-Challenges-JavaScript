// A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.

// Implement the Trie class:

// Trie() Initializes the trie object.
// void insert(String word) Inserts the string word into the trie.
// boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.
// boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.

class TrieNode {
    children: Map<string, TrieNode>;
    isEndOfWord: boolean;

    constructor() {
        this.children = new Map();
        this.isEndOfWord = false;
    }
}

class Trie {
    private root: TrieNode;

    constructor() {
        this.root = new TrieNode();
    }

    insert(word: string): void {
        let node = this.root; 
        for (const char of word) {
            if (!node.children.has(char)) {
                node.children.set(char, new TrieNode());
            }
            node = node.children.get(char)!;
        }
        node.isEndOfWord = true;
    }

    /**
     * Returns true if the full word is in the Trie
     * Time Complexity: O(n), where n = word.length
     */
    search(word: string): boolean {
        const node = this.traverse(word);
        return node !== null && node.isEndOfWord;
    }

   
    startsWith(prefix: string): boolean {
        return this.traverse(prefix) !== null;
    }

    private traverse(word: string): TrieNode | null {
        let node = this.root;
        for (const char of word) {
            const next = node.children.get(char);
            if (!next) return null;
            node = next;
        }
        return node;
    }
}
